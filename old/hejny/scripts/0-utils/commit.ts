import chalk from 'chalk';
import { mkdir, writeFile } from 'fs/promises';
import { dirname, join } from 'path';
import spaceTrim from 'spacetrim';
import { execCommand } from './execCommand/execCommand';
import { isWorkingTreeClean } from './isWorkingTreeClean';

interface ICommitOptions {
    projectPath: string;
    message: string;
}

export async function commit({ projectPath, message }: ICommitOptions): Promise<boolean> {
    if (await isWorkingTreeClean(projectPath)) {
        console.info(chalk.gray(`⏩ Not commiting because nothings changed`));
        return false;
    }

    await execCommand({
        cwd: projectPath,
        crashOnError: false,
        command: `git add .`,
    });

    const commitMessageFilePath = join(process.cwd(), '.tmp', 'COMMIT_MESSAGE');
    const commitMessage = spaceTrim(
        (block) => `
        ${block(message)}

          🔼 This commit was automatically generated by [Batch project editor](https://github.com/hejny/batch-project-editor)
        `,
    );

    await mkdir(dirname(commitMessageFilePath), { recursive: true });
    await writeFile(commitMessageFilePath, commitMessage, 'utf8');

    await execCommand({
        cwd: projectPath,
        crashOnError: false,
        command: `git commit --file ${commitMessageFilePath}`,
    });

    await execCommand({
        cwd: projectPath,
        crashOnError: false,
        command: `git push --quiet`,
    });

    return true;
}
