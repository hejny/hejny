[
    {
        "requestText": "Write JSDoc annotations for TypeScript code:\n\n\n\n\n\n\n\ninterface ParticleOptions {\n    place: HTMLElement;\n    position: IVector;\n    size: number;\n    color: Color;\n}\n\n\nclass Particle extends Destroyable implements IDestroyable {\n\n    public readonly particleElement: HTMLElement;\n\n    public constructor(public readonly options: ParticleOptions) {\n        super();\n\n        this.particleElement = document.createElement('div');\n        this.options.place.appendChild(this.particleElement);\n\n        this.particleElement.style.pointerEvents = 'none';\n        this.particleElement.style.position = 'absolute';\n\n        this.particleElement.style.width = `${options.size}px`;\n        this.particleElement.style.height = `${options.size}px`;\n        this.particleElement.style.left = `${options.position.x || 0 - options.size / 2}px`;\n        this.particleElement.style.top = `${options.position.y || 0 - options.size / 2}px`;\n\n        this.particleElement.style.backgroundColor = options.color.toString();\n        this.particleElement.style.borderRadius = '100%';\n    }\n\n    \n    public async fadeOut(duration: number): Promise<void> {\n        this.particleElement.style.opacity = '1';\n        this.particleElement.style.transition = `opacity ${duration / 1000}s ease-in-out`;\n        await forAnimationFrame();\n        this.particleElement.style.opacity = '0';\n\n        await forTime(duration);\n\n        await this.destroy();\n    }\n\n    public async destroy(): Promise<void> {\n        this.options.place.removeChild(this.particleElement);\n        super.destroy();\n    }\n}\n\n\n",
        "responseText": "Here is the TypeScript code with JSDoc annotations:\n\n/**\n * Interface for particle options.\n */\ninterface ParticleOptions {\n  /** The HTML element where the particle will be placed. */\n  place: HTMLElement;\n  /** The position of the particle. */\n  position: IVector;\n  /** The size of the particle. */\n  size: number;\n  /** The color of the particle. */\n  color: Color;\n}\n\n/**\n * Class representing a particle.\n * @extends Destroyable\n * @implements IDestroyable\n */\nclass Particle extends Destroyable implements IDestroyable {\n  /** The HTML element representing the particle. */\n  public readonly particleElement: HTMLElement;\n\n  /**\n   * Creates a new Particle instance.\n   * @param {ParticleOptions} options - The options for the particle.\n   */\n  public constructor(public readonly options: ParticleOptions) {\n    super();\n    this.particleElement = document.createElement('div');\n    this.options.place.appendChild(this.particleElement);\n    this.particleElement.style.pointerEvents = 'none';\n    this.particleElement.style.position = 'absolute';\n    this.particleElement.style.width = `${options.size}px`;\n    this.particleElement.style.height = `${options.size}px`;\n    this.particleElement.style.left = `${options.position.x || 0 - options.size / 2}px`;\n    this.particleElement.style.top = `${options.position.y || 0 - options.size / 2}px`;\n    this.particleElement.style.backgroundColor = options.color.toString();\n    this.particleElement.style.borderRadius = '100%';\n  }\n\n  /**\n   * Fades out the particle.\n   * @param {number} duration - The duration of the fade out in milliseconds.\n   * @returns {Promise<void>}\n   */\n  public async fadeOut(duration: number): Promise<void> {\n    this.particleElement.style.opacity = '1';\n    this.particleElement.style.transition = `opacity ${duration / 1000}s ease-in-out`;\n    await forAnimationFrame();\n    this.particleElement.style.opacity = '0';\n    await forTime(duration);\n    await this.destroy();\n  }\n\n  /**\n   * Destroys the particle.\n   * @returns {Promise<void>}\n   */\n  public async destroy(): Promise<void> {\n    this.options.place.removeChild(this.particleElement);\n    super.destroy();\n  }\n}\n",
        "responseHtml": "\n    <div class=\"content\" aria-hidden=\"true\" tabindex=\"0\">\n      <div class=\"ac-container ac-adaptiveCard\" style=\"\"><div class=\"ac-textBlock\" style=\"\"><p>Here is the TypeScript code with JSDoc annotations:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">/**\n * Interface for particle options.\n */</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ParticleOptions</span> {\n  <span class=\"hljs-comment\">/** The HTML element where the particle will be placed. */</span>\n  <span class=\"hljs-attr\">place</span>: <span class=\"hljs-title class_\">HTMLElement</span>;\n  <span class=\"hljs-comment\">/** The position of the particle. */</span>\n  <span class=\"hljs-attr\">position</span>: <span class=\"hljs-title class_\">IVector</span>;\n  <span class=\"hljs-comment\">/** The size of the particle. */</span>\n  <span class=\"hljs-attr\">size</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-comment\">/** The color of the particle. */</span>\n  <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Color</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Class representing a particle.\n * <span class=\"hljs-doctag\">@extends</span> <span class=\"hljs-variable\">Destroyable</span>\n * <span class=\"hljs-doctag\">@implements</span> <span class=\"hljs-variable\">IDestroyable</span>\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Particle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Destroyable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IDestroyable</span> {\n  <span class=\"hljs-comment\">/** The HTML element representing the particle. */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">particleElement</span>: <span class=\"hljs-title class_\">HTMLElement</span>;\n\n  <span class=\"hljs-comment\">/**\n   * Creates a new Particle instance.\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">ParticleOptions</span>} <span class=\"hljs-variable\">options</span> - The options for the particle.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">readonly</span> options: ParticleOptions</span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span> = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">'div'</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">place</span>.<span class=\"hljs-title function_\">appendChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">pointerEvents</span> = <span class=\"hljs-string\">'none'</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">position</span> = <span class=\"hljs-string\">'absolute'</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">width</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${options.size}</span>px`</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${options.size}</span>px`</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${options.position.x || <span class=\"hljs-number\">0</span> - options.size / <span class=\"hljs-number\">2</span>}</span>px`</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${options.position.y || <span class=\"hljs-number\">0</span> - options.size / <span class=\"hljs-number\">2</span>}</span>px`</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = options.<span class=\"hljs-property\">color</span>.<span class=\"hljs-title function_\">toString</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">borderRadius</span> = <span class=\"hljs-string\">'100%'</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Fades out the particle.\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} <span class=\"hljs-variable\">duration</span> - The duration of the fade out in milliseconds.\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Promise&lt;void&gt;</span>}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">fadeOut</span>(<span class=\"hljs-attr\">duration</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">opacity</span> = <span class=\"hljs-string\">'1'</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">transition</span> = <span class=\"hljs-string\">`opacity <span class=\"hljs-subst\">${duration / <span class=\"hljs-number\">1000</span>}</span>s ease-in-out`</span>;\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">forAnimationFrame</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">opacity</span> = <span class=\"hljs-string\">'0'</span>;\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">forTime</span>(duration);\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">destroy</span>();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Destroys the particle.\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Promise&lt;void&gt;</span>}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">destroy</span>(): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt; {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">place</span>.<span class=\"hljs-title function_\">removeChild</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">particleElement</span>);\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">destroy</span>();\n  }\n}\n</code></pre>\n</div></div>\n    </div>\n  ",
        "metadataText": "@generator ChatBing from Sun Apr 02 2023"
    }
]
