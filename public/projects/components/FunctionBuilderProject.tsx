/**
 * üè≠ GENERATED WITH üñºÔ∏è Generate projects library
 * ‚ö†Ô∏è Warning: Do not edit by hand, all changes will be lost on next execution!
 *    If you want to edit this file:
 *      - Change @generated to @not-generated
 *      - And remove this warning
 *    Then the file will not be re-generated automatically
 */

import { forTime } from 'waitasecond';
import { Vector } from 'xyzt';
import { Item } from '../../../components/Items/Item';
import { Drawing } from '../../../utils/Drawing/Drawing';
import background from '../collboard-function-builder-3.png';

/**
 * !!!
 *
 * @see !!!
 * @generated by generate-projects-library
 */
export function FunctionBuilderProject() {
    return (
        <a
            href="https://github.com/collboard/function-builder"
            target="_blank"
            rel="noreferrer"
            ref={async (element) => {
                // !!! Also work on mobile
                // TODO: To separate util addFoooInteractivity

                if (element === null) {
                    return;
                }

                await forTime(1000);
                // !!! await forDocumentReady();
                //  console.log(element.getBoundingClientRect());
                const origin = Vector.fromObject(window, ['pageXOffset', 'pageYOffset'])
                    .add(Vector.fromObject(element.getBoundingClientRect(), ['x', 'y']))
                    .add(Vector.fromObject(element.getBoundingClientRect(), ['width', 'height']).half());
                let drawing = new Drawing();

                /*
                drawing
                    .addPoint(origin)
                    .addPoint(origin.add({ x: 5, y: 5 }))
                    .addPoint(origin.add({ x: -5, y: 5 }));
                */

                function graph(seedPosition: Vector) {
                    drawing.clean();
                    for (let x = -100; x < 100; x += 2) {
                        let y =
                            Math.sin(x / 10) * 30 +
                            Math.cos(x / 50 + seedPosition.x / 50) * 30 +
                            Math.sin(x / 10 + seedPosition.y / 50) * 5;

                        y = Math.min(y, 100);
                        y = Math.max(y, -100);

                        drawing.addPoint(origin.add({ x, y }));
                    }
                }

                let seedPosition = Vector.zero();
                graph(seedPosition);

                element.addEventListener('mousemove', (event) => {
                    // TODO: LIB xyzt: addInPlace

                    seedPosition = seedPosition.add(Vector.fromObject(event, ['movementX', 'movementY']));

                    graph(seedPosition);
                });
            }}
        >
            <Item>
                <Item.Title>Function builder</Item.Title>
                <Item.Description>
                    <p>@@@</p>
                </Item.Description>
                <Item.Image>
                    <div
                        style={{
                            backgroundImage: `url(${background.src})`,
                            backgroundSize: 'cover',
                            backgroundPosition: '50% 30%',
                            backgroundRepeat: 'no-repeat',
                            width: '100%',
                            height: '100%',
                        }}
                    />
                    {/* <Image alt="@@@" src={background} draggable="false" /> */}
                </Item.Image>
            </Item>
        </a>
    );
}
