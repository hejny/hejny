#!/usr/bin/env ts-node

import chalk from 'chalk';
import commander from 'commander';
import { readFile, writeFile } from 'fs/promises';
import { normalizeTo_PascalCase } from 'n12';
import { dirname, join, relative } from 'path';
import { Converter } from 'showdown';
import { commit } from '../utils/autocommit/commit';
import { isWorkingTreeClean } from '../utils/autocommit/isWorkingTreeClean';
import { prettify } from '../utils/prettify';

const program = new commander.Command();
program.option('--commit', `Autocommit changes`);
program.parse(process.argv);
const { commit: isCommited } = program.opts();

generateHackingsLibrary({ isCommited })
    .catch((error) => {
        console.error(chalk.bgRed(error.name));
        console.error(error);
        process.exit(1);
    })
    .then(() => {
        process.exit(0);
    });

async function generateHackingsLibrary({ isCommited }: { isCommited: boolean }) {
    console.info(`üñºÔ∏è  Generating hacking library`);

    if (isCommited && !(await isWorkingTreeClean(process.cwd()))) {
        throw new Error(`Working tree is not clean`);
    }

    // !!! Replace all "hackings"

    const rootDir = join(__dirname, '../../');
    const hackingsDir = join(rootDir, 'pages-sections/Hacking/hackings');
    const hackingsFilePath = join(hackingsDir, 'hackings.md');
    const hackingsFileContent = await readFile(hackingsFilePath, 'utf-8');
    const matches = hackingsFileContent.matchAll(/(?<title>^##.*?$)(?<body>[^^#]+)/gms);

    for (const match of matches) {
        const { title, body } = match.groups!;

        // TODO: Use> const title = markdownToTxt(item /* !!! */);
        //          > import markdownToTxt from 'markdown-to-txt';

        const converter = new Converter();
        const html = converter.makeHtml(body);

        const componentName = normalizeTo_PascalCase(title) + 'Hacking';
        const hackingFilePath = join(hackingsDir, componentName) + '.tsx';
        const hackingFileOldContent = await readFile(hackingFilePath, 'utf-8');

        if (hackingFileOldContent.includes(`@not-generated by generate-hackings-library`)) {
            console.info(`‚è© ${relative(process.cwd(), hackingFilePath).split('\\').join('/')}`);
            continue;
        }

        const hackingFileContent = await prettify(`

            /**
             * üè≠ GENERATED WITH üñºÔ∏è Generate hackings library
             * ‚ö†Ô∏è Warning: Do not edit by hand, all changes will be lost on next execution!
             *    If you want to edit this file:
             *      - Change @generated to @not-generated
             *      - And remove this warning
             *    Then the file will not be re-generated automatically
             */
        
            import Image from 'next/image';

            /**
             * !!!
             * 
             * @see !!!
             * @generated by generate-hackings-library
             */
            export function ${componentName}() {
                return <Item>!!!${title}</Item>;
            }
        `);

        await writeFile(hackingFilePath, hackingFileContent, 'utf-8');
        console.info(`üíæ ${relative(process.cwd(), hackingFilePath).split('\\').join('/')}`);
    }

    if (isCommited) {
        await commit(dirname(hackingsDir), `üñºÔ∏è  Generate hackings library`);
    }

    // TODO: Maybe generate an index component

    console.info(`[ Done üñºÔ∏è  Generating hackings library ]`);
    process.exit(0);
}

/**
 * TODO: Maybe rename generateProjectsLibrary
 */
