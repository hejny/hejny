#!/usr/bin/env ts-node

import chalk from 'chalk';
import commander from 'commander';
import { readFile, writeFile } from 'fs/promises';
import markdownToTxt from 'markdown-to-txt';
import { normalizeTo_PascalCase } from 'n12';
import { dirname, join, relative } from 'path';
import { Converter } from 'showdown';
import { commit } from '../utils/autocommit/commit';
import { isWorkingTreeClean } from '../utils/autocommit/isWorkingTreeClean';
import { prettify } from '../utils/prettify';

const program = new commander.Command();
program.option('--commit', `Autocommit changes`);
program.parse(process.argv);
const { commit: isCommited } = program.opts();

generateHackingsLibrary({ isCommited })
    .catch((error) => {
        console.error(chalk.bgRed(error.name));
        console.error(error);
        process.exit(1);
    })
    .then(() => {
        process.exit(0);
    });

async function generateHackingsLibrary({ isCommited }: { isCommited: boolean }) {
    console.info(`üñºÔ∏è  Generating hacking library`);

    if (isCommited && !(await isWorkingTreeClean(process.cwd()))) {
        throw new Error(`Working tree is not clean`);
    }

    // !!! Replace all "hackings"

    const rootDir = join(__dirname, '../../');
    const hackingsComponentsDir = join(rootDir, 'pages-sections/Hacking/hackings');
    const hackingsDocumentFilePath = join(rootDir, 'public/hackings/0-hackings.md');
    const hackingsDocumentFileContent = await readFile(hackingsDocumentFilePath, 'utf-8');
    const matches = hackingsDocumentFileContent.matchAll(/(?<titleMarkdown>^##.*?$)(?<bodyMarkdown>[^^#]+)/gms);

    for (const match of matches) {
        const { titleMarkdown, bodyMarkdown } = match.groups!;

        const title = markdownToTxt(titleMarkdown);

        let imagesMatch = bodyMarkdown.matchAll(/!\[(?<alt>.*?)\]\((?<src>.*?)\)/g);
        const images: Array<{ src: string; alt: string }> = Array.from(imagesMatch).map(
            ({ groups: { alt, src } }: any) => ({ alt, src }),
        );
        const image = images[0];

        if (!image) {
            throw new Error(`Hacking ${title} has no image`);
        }

        let tagsMatch = bodyMarkdown.matchAll(/`(?<tag>.*?)`/g);
        const tags: Array<string> = Array.from(tagsMatch).map(({ groups: { tag } }: any) => tag);

        // TODO: !!! Remove image from body
        // TODO: !!! Remove tags from body

        const converter = new Converter();
        const bodyHtml = converter.makeHtml(bodyMarkdown);

        const componentName = normalizeTo_PascalCase(titleMarkdown) + 'Hacking';
        const hackingFilePath = join(hackingsComponentsDir, componentName) + '.tsx';
        const hackingFileOldContent = await readFile(hackingFilePath, 'utf-8');

        if (hackingFileOldContent.includes(`@not-generated by generate-hackings-library`)) {
            console.info(`‚è© ${relative(process.cwd(), hackingFilePath).split('\\').join('/')}`);
            continue;
        }

        // TODO: !!! Remove use tags in body

        const hackingFileContent = await prettify(`

            /**
             * üè≠ GENERATED WITH üñºÔ∏è Generate hackings library
             * ‚ö†Ô∏è Warning: Do not edit by hand, all changes will be lost on next execution!
             *    If you want to edit this file:
             *      - Change @generated to @not-generated
             *      - And remove this warning
             *    Then the file will not be re-generated automatically
             */
        
            import Image from 'next/image';
            import { Item } from '../../../components/Items/Item';
            import background /* <- TODO: Put filename into this import name .replace(/\.[a-z0-9]+$/, '') */ from '${relative(
                dirname(hackingFilePath),
                join(process.cwd(), image.src),
                // TODO: Here should be sth like> join(dirname(hackingsDocumentFilePath), image.src),
            )
                .split('\\')
                .join('/')
                .replace(/^\.\/\.\.\//, '../')}';

            /**
             * !!!
             * 
             * @see !!!
             * @generated by generate-hackings-library
             */
            export function ${componentName}() {
                return(
                    <Item>
                        <Item.Title>${title}</Item.Title>
                        <Item.Description>
                            {/* TODO: !!! Text should be selectable even inside of <a> */}
                            ${bodyHtml}
                        </Item.Description>
                        <Item.Image>
                            <Image alt="${image.alt}" src={background} draggable="false" />
                        </Item.Image>
                    </Item>
                );
            }

        `);

        await writeFile(hackingFilePath, hackingFileContent, 'utf-8');
        console.info(`üíæ ${relative(process.cwd(), hackingFilePath).split('\\').join('/')}`);
    }

    if (isCommited) {
        await commit(dirname(hackingsComponentsDir), `üñºÔ∏è  Generate hackings library`);
    }

    // TODO: Maybe generate an index component

    console.info(`[ Done üñºÔ∏è  Generating hackings library ]`);
    process.exit(0);
}

/**
 * TODO: Maybe rename generateProjectsLibrary
 */
